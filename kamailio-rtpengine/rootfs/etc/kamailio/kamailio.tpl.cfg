#!KAMAILIO
#### Global
enable_tls=1
debug=2
fork=yes
children=3
auto_aliases=no
mpath="/usr/lib/kamailio/modules/"

# Listen sockets (TLS on WS_PORT is used as WSS for the card)
listen=udp:0.0.0.0:5060 advertise ${ADVERTISED_IP}:5060
listen=tls:0.0.0.0:${WS_PORT} advertise ${ADVERTISED_IP}:${WS_PORT}

#### Modules
loadmodule "sl.so"
loadmodule "tm.so"
modparam("tm", "fr_timer", 5)
modparam("tm", "fr_inv_timer", 30)
loadmodule "rr.so"
loadmodule "sanity.so"
loadmodule "maxfwd.so"
loadmodule "pv.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"

loadmodule "tls.so"
modparam("tls", "config", "/etc/kamailio/tls/kamailio-tls.cfg")

loadmodule "websocket.so"
modparam("websocket", "keepalive_mechanism", 1)

loadmodule "registrar.so"
loadmodule "usrloc.so"
modparam("usrloc", "db_mode", 0)

loadmodule "htable.so"
modparam("htable", "htable", "cred=>size=8;autoexpire=0")

loadmodule "auth.so"

loadmodule "uac.so"
modparam("uac", "restore_mode", "auto")

loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:22222")

#### Routing
request_route {
    if (!mf_process_maxfwd_header("10")) { sl_send_reply("483","Too Many Hops"); exit; }
    if (!sanity_check("1511", "7")) { sl_send_reply("400","Bad request"); exit; }

    # Mark requests coming from the WSS port (use runtime var to avoid parser quirks)
    $var(ws_port) = "${WS_PORT}";
    if ($Rp == $var(ws_port)) { setflag(7); }

    # REGISTER from the card (digest using htable 'cred')
    if (is_method("REGISTER")) {
        if ($au == $null) { www_challenge("", "0"); exit; }
        $var(pw) = $sht(cred=>$au);
        if ($var(pw) == $null) { www_challenge("", "0"); exit; }
        if (!pv_auth_check("$fd", "$var(pw)", "0", "0")) { www_challenge("", "0"); exit; }
        save("location");
        sl_send_reply("200","OK");
        exit;
    }

    if (is_method("OPTIONS")) { sl_send_reply("200","OK"); exit; }
    if (is_method("INVITE|SUBSCRIBE")) { record_route(); }

    # Media bridge (Offer at request)
    if (is_method("INVITE") && has_body("application/sdp")) {
        if (isflagset(7)) {
            # From card (WebRTC) -> towards Dahua (RTP)
            rtpengine_offer("DTLS=passive ICE=remove rtcp-mux-demux force-avp replace-origin replace-session-connection flags=SENDRECV");
        } else {
            # From Dahua (RTP) -> towards card (WebRTC)
            rtpengine_offer("ICE=remove rtcp-mux replace-origin replace-session-connection DTLS=passive");
        }
    }

    # From card -> upstream to Dahua server
    if (isflagset(7)) {
        $du = "sip:${DAHUA_ADDR};transport=udp";
        route(RELAY);
    }

    # From Dahua -> accept only INVITE to your extension
    if (is_method("INVITE")) {
        if ($rU != "${EXT_KAM}") { sl_send_reply("404","Not Here"); exit; }
        if (!lookup("location")) { sl_send_reply("480","Temporarily Unavailable"); exit; }
        route(RELAY);
    }

    sl_send_reply("405","Method Not Allowed"); exit;
}

onreply_route {
    if (has_body("application/sdp")) {
        if (isflagset(7)) {
            # Reply towards Dahua
            rtpengine_answer("DTLS=passive ICE=remove rtcp-mux-demux force-avp replace-origin replace-session-connection flags=SENDRECV");
        } else {
            # Reply towards card
            rtpengine_answer("ICE=remove rtcp-mux replace-origin replace-session-connection DTLS=passive");
        }
    }
}

route[RELAY] {
    if (!t_relay()) { sl_reply_error(); }
    exit;
}
